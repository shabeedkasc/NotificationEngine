import stream from 'stream';

declare class SnappyStream extends stream.Transform {
    constructor(options?: stream.TransformOptions);
    _transform(data: Buffer | string, _: BufferEncoding, callback: (err?: Error) => void): void;
}
declare class UnsnappyStream extends stream.Transform {
    verifyChecksums: boolean;
    private identifierFound;
    private frameBuffer;
    constructor(verifyChecksums?: boolean, options?: {});
    framePayload(frame: Buffer): Buffer;
    frameMask(frame: Buffer): number;
    hasFrame(data: Buffer): boolean;
    toNextFrame(data: Buffer): Buffer;
    verify(mask: number | null, data: Buffer | string): void;
    processChunks(chunks: [number, number | null, Buffer][], done?: (err?: Error) => void): Promise<void>;
    _transform(data: Buffer | string, encoding: BufferEncoding | null, done: (err?: Error) => void): boolean | void | Promise<void>;
    _flush(done: (err?: Error) => void): void;
}

export { SnappyStream, UnsnappyStream };
